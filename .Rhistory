((!(unit %in% sample1)) & (time <= median(time)))
if (frequency == "daily") {
cross1 = plm(formula, data = data[subsample1,], model = "within",
index = c("X.Canton_3", "X.day"), effect = "twoways")
cross2 = plm(formula, data = data[subsample2,], model = "within",
index = c("X.Canton_3", "X.day"),effect = "twoways")
} else {
cross1 = plm(formula, data = data[subsample1,], model = "within",
index = c("X.Canton_3", "X.oneweek"), effect = "twoways")
cross2 = plm(formula, data = data[subsample2,], model = "within",
index = c("X.Canton_3", "X.oneweek"),effect = "twoways")
}
common_coef_names = intersect(names(coef(cross1)), names(coef(cross2))) # all of them in both samples
print(length(common_coef_names))
print(common_coef_names)
for (coef_name in common_coef_names) {
coef_cross1 = coef(cross1)[coef_name]
coef_cross2 = coef(cross2)[coef_name]
result = (coef_cross1 + coef_cross2) / (2 * s)
across[coef_name] = across[coef_name] + result
}
#across = across + ((coef(cross1) + coef(cross2))/2)/s
}
# Average cross over corrected
acbc = 2 * coef(uc) - across
return(acbc)
}
multiple_split_middle(response = "median_R_mean", frequency = "weekly", infovar = FALSE, type.effect = "total")
multiple_split_middle(response = "casegrowth", frequency = "weekly", infovar = FALSE, type.effect = "total")
# Data
data = data.prep(response = response, r.infovar = 21, shift = 14, startdate = "2020-07-06",
enddate = "2020-10-18")$data
# Do that for the DFE
multiple_split_middle = function(response, frequency, infovar, type.effect) {
# response: response variable in {median_R_mean, casegrowth}
# frequency: frequency in {daily, weekly}
# infovar: add additional information variables
# type.effect: direct or total to include behavior variables or not
# Output: bias.corrected estimate of mask policy
# Data
data = data.prep(response = response, r.infovar = 21, shift = 14, startdate = "2020-07-06",
enddate = "2020-10-18")$data
# Store formula
formula = construct.formula(response = response, frequency = frequency, model = "within", infovar = infovar, type.effect = type.effect,
lag.one = FALSE)
# Number of splits along the cross-section
s = 500
# Fit non-debiased model daily or weekly and save time and unit for sampling later
if (frequency == "daily") {
uc     = plm(formula, data = data, model = "within", index = c("X.Canton_3", "X.day"), effect = "twoways")
time   = as.double(data$X.day)
unit   = as.double(data$X.Canton_3)
} else {
uc     = plm(formula, data = data, model = "within", index = c("X.Canton_3", "X.oneweek"), effect = "twoways")
time   = as.double(data$X.oneweek)
unit   = as.double(data$X.Canton_3)
}
# Start computation
across = 0 * coef(uc)
for (k in 1:s) {
# Sampling process
sample1 = sample(unique(unit), ceiling(length(unique(unit))/2), replace = FALSE)
subsample1 = ((unit %in% sample1) & (time <= median(time))) |
((!(unit %in% sample1)) & (time > median(time)))
subsample2 = ((unit %in% sample1) & (time > median(time))) |
((!(unit %in% sample1)) & (time <= median(time)))
if (frequency == "daily") {
cross1 = plm(formula, data = data[subsample1,], model = "within",
index = c("X.Canton_3", "X.day"), effect = "twoways")
cross2 = plm(formula, data = data[subsample2,], model = "within",
index = c("X.Canton_3", "X.day"),effect = "twoways")
} else {
cross1 = plm(formula, data = data[subsample1,], model = "within",
index = c("X.Canton_3", "X.oneweek"), effect = "twoways")
cross2 = plm(formula, data = data[subsample2,], model = "within",
index = c("X.Canton_3", "X.oneweek"),effect = "twoways")
}
common_coef_names = intersect(names(coef(cross1)), names(coef(cross2))) # all of them in both samples
print(length(common_coef_names))
print(common_coef_names)
for (coef_name in common_coef_names) {
coef_cross1 = coef(cross1)[coef_name]
coef_cross2 = coef(cross2)[coef_name]
result = (coef_cross1 + coef_cross2) / (2 * s)
across[coef_name] = across[coef_name] + result
}
#across = across + ((coef(cross1) + coef(cross2))/2)/s
}
# Average cross over corrected
acbc = 2 * coef(uc) - across
return(acbc)
}
multiple_split_middle(response = "median_R_mean", frequency = "weekly", infovar = FALSE, type.effect = "total")
# Do that for the DFE
multiple_split_middle = function(response, frequency, infovar, type.effect) {
# response: response variable in {median_R_mean, casegrowth}
# frequency: frequency in {daily, weekly}
# infovar: add additional information variables
# type.effect: direct or total to include behavior variables or not
# Output: bias.corrected estimate of mask policy
# Data
data = data.prep(response = response, r.infovar = 21, shift = 14, startdate = "2020-07-06",
enddate = "2020-10-18", frequency = "weekly")$data
# Store formula
formula = construct.formula(response = response, frequency = frequency, model = "within", infovar = infovar, type.effect = type.effect,
lag.one = FALSE)
# Number of splits along the cross-section
s = 500
# Fit non-debiased model daily or weekly and save time and unit for sampling later
if (frequency == "daily") {
uc     = plm(formula, data = data, model = "within", index = c("X.Canton_3", "X.day"), effect = "twoways")
time   = as.double(data$X.day)
unit   = as.double(data$X.Canton_3)
} else {
uc     = plm(formula, data = data, model = "within", index = c("X.Canton_3", "X.oneweek"), effect = "twoways")
time   = as.double(data$X.oneweek)
unit   = as.double(data$X.Canton_3)
}
# Start computation
across = 0 * coef(uc)
for (k in 1:s) {
# Sampling process
sample1 = sample(unique(unit), ceiling(length(unique(unit))/2), replace = FALSE)
subsample1 = ((unit %in% sample1) & (time <= median(time))) |
((!(unit %in% sample1)) & (time > median(time)))
subsample2 = ((unit %in% sample1) & (time > median(time))) |
((!(unit %in% sample1)) & (time <= median(time)))
if (frequency == "daily") {
cross1 = plm(formula, data = data[subsample1,], model = "within",
index = c("X.Canton_3", "X.day"), effect = "twoways")
cross2 = plm(formula, data = data[subsample2,], model = "within",
index = c("X.Canton_3", "X.day"),effect = "twoways")
} else {
cross1 = plm(formula, data = data[subsample1,], model = "within",
index = c("X.Canton_3", "X.oneweek"), effect = "twoways")
cross2 = plm(formula, data = data[subsample2,], model = "within",
index = c("X.Canton_3", "X.oneweek"),effect = "twoways")
}
common_coef_names = intersect(names(coef(cross1)), names(coef(cross2))) # all of them in both samples
print(length(common_coef_names))
print(common_coef_names)
for (coef_name in common_coef_names) {
coef_cross1 = coef(cross1)[coef_name]
coef_cross2 = coef(cross2)[coef_name]
result = (coef_cross1 + coef_cross2) / (2 * s)
across[coef_name] = across[coef_name] + result
}
#across = across + ((coef(cross1) + coef(cross2))/2)/s
}
# Average cross over corrected
acbc = 2 * coef(uc) - across
return(acbc)
}
multiple_split_middle(response = "median_R_mean", frequency = "weekly", infovar = FALSE, type.effect = "total")
-0.106+1.96*0.05488037
-0.106-1.96*0.05488037
multiple_split_middle(response = "casegrowth", frequency = "weekly", infovar = FALSE, type.effect = "total")
-0.0742+1.96*0.07332540
-0.0742-1.96*0.07332540
# (I) OVERVIEW
# This script produces the plots from the paper.
################################################################################
# (II) ENVIRONMENT AND PACKAGES
# Empty environment
rm(list = ls())
# Set working directory to the root node of folder structure
#setwd(".\\Mask_Project\\Final")
setwd("C:/Users/eminu/OneDrive/Desktop/Facial-Mask-Policy-COVID-19")
# Read helper functions. Note that they are in the same directory. Add the corresponding path
# otherwise.
#source(".\\Scripts\\helperfunctions.R")
source("./Code/helperfunctions.R")
# # Read in fonts
# font_install("fontcm")
# Read in data; change col-names to correspond to dw-plot; make ordering consistent; remove those with additional
# information variables as well as the DML rows.
results = read.csv(".\\Data\\results_long_period_new_1.csv", header = T, sep = ",", stringsAsFactors = FALSE)
results = results %>%
filter(!model == "DML") %>%
filter(!model == "Canton-Bootstrap") %>%
filter(add.infovar == FALSE)
results[results == "FE R"] = "FE r"
results[results == "DFE R"] = "DFE r"
results[results == "RE R"] = "RE r"
results[results == "FE Casegrowth"] = "FE growth.new.cases"
results[results == "DFE Casegrowth"] = "DFE growth.new.cases"
results[results == "RE Casegrowth"] = "RE growth.new.cases"
results[results == "Canton-Time"] = "Canton-Week"
results[results == "Time"] = "Week"
results.direct = results %>%
filter(type.effect == "direct")
results.total = results %>%
filter(type.effect == "total")
# Read in data and prepare it
data.r = data.prep(lag = 7, shift = 14, response = "median_R_mean", r.infovar = 21, frequency = "weekly")$data
data.r = data.r %>%
arrange(X.Canton_3, X.oneweek) %>%
select(X.Canton_3, X.oneweek, Y, X.population_we)
data.r = rename(data.r, median_R_mean = Y)
# Shift = 11 for maximal correlation
data.case = data.prep(lag = 7, shift = 14, response = "casegrowth", r.infovar = 21, frequency = "weekly")$data
data.case = data.case %>%
arrange(X.Canton_3, X.oneweek) %>%
select(X.Canton_3, X.oneweek, Y)
data.case = rename(data.case, casegrowth = Y)
# Merge data and adjust data type and input the abbreviations of the cantons. Also compute correlation
data = merge(data.r, data.case)
dates = rep(seq(as.Date("2020-07-06"), as.Date("2020-12-20"), by = "week"), 26)
data = data %>%
group_by(X.Canton_3) %>%
mutate(correl = sprintf("italic(rho) == %.2f", round(cor(median_R_mean, casegrowth), 2)),
correl.num = round(cor(median_R_mean, casegrowth), 2))
data = cbind(data, dates)
colnames(data) = c("X.Canton_3", "X.oneweek", "median_R_mean", "X.population_we", "casegrowth", "correl", "correl.num", "date")
# Keep first (one) observation per canton to compute the correlation between the correlation of R and case-growth
# and the population size
data.corr = data %>%
group_by(X.Canton_3) %>%
filter(row_number() == 1)
corr.pop = cor(data.corr$correl.num, data.corr$X.population_we) # 0.57
median.correl = median(data.corr$correl.num) # 0.585
mean = mean(data.corr$correl.num) # 0.56
data = data %>%
mutate(X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 2, "GE"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 4, "VD"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 5, "FR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 11, "NE"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 3, "VS"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 9, "BE"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 17, "JU"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 16, "SO"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 22, "BL"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 12, "LU"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 26, "SH"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 24, "BS"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 20, "AG"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 8, "OW"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 10, "NW"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 6, "UR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 1, "TI"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 15, "ZG"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 13, "SZ"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 14, "GL"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 23, "SG"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 18, "ZH"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 21, "AR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 19, "AI"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 7, "GR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 25, "TG"))
# Plot
Sys.setlocale("LC_TIME", "English")
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12, angle = 45),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12, angle = 45,
vjust = -2),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12, angle = 45,
vjust = -1),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12, angle = 45,
hjust = -1),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12, angle = 90),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
# Plot
Sys.setlocale("LC_TIME", "English")
pdf(".\\Plots\\r-case-compare_final.pdf", width = 10, height = 10*1.414)
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12, angle = 90),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
dev.off()
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%B") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12, angle = 90),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8, 0.04))
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
# Plot
Sys.setlocale("LC_TIME", "English")
pdf(".\\Plots\\r-case-compare_final.pdf", width = 10, height = 10*1.414)
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
dev.off()
