setwd("C:/Users/eminu/OneDrive/Desktop/Facial-Mask-Policy-COVID-19")
# (I) OVERVIEW
# This script produces the plots from the paper.
################################################################################
# (II) ENVIRONMENT AND PACKAGES
# Empty environment
rm(list = ls())
source("./Code/helperfunctions.R")
################################################################################
# (III) PLOTS
# (i) CI Plots
results = read.csv(".\\Data\\results.csv", header = T, sep = ",", stringsAsFactors = FALSE)
results = results %>%
filter(!model == "DML") %>%
filter(!model == "Canton-Bootstrap") %>%
filter(add.infovar == FALSE)
View(results)
results = read.csv(".\\Data\\results.csv", header = T, sep = ",", stringsAsFactors = FALSE)
View(results)
results = read.csv(".\\Data\\results.csv", header = T, sep = ".", stringsAsFactors = FALSE)
View(results)
results = read.csv(".\\Data\\results.csv", header = T, sep = ",", stringsAsFactors = FALSE)
results = results %>%
filter(!model == "DML") %>%
filter(!model == "Canton-Bootstrap") %>%
filter(add.infovar == FALSE)
results = read.csv(".\\Data\\results.csv", header = T, sep = ",", stringsAsFactors = FALSE)
View(results)
View(results)
results = read.csv(".\\Data\\results.csv", header = T, sep = ",", stringsAsFactors = FALSE)
View(results)
results = results %>%
filter(!model == "DML") %>%
filter(!model == "Canton-Bootstrap") %>%
filter(add.infovar == FALSE)
results[results == "FE R"] = "FE r"
results[results == "DFE R"] = "DFE r"
results[results == "RE R"] = "RE r"
results[results == "FE Casegrowth"] = "FE growth.new.cases"
results[results == "DFE Casegrowth"] = "DFE growth.new.cases"
results[results == "RE Casegrowth"] = "RE growth.new.cases"
results[results == "Canton-Time"] = "Canton-Week"
results[results == "Time"] = "Week"
results.direct = results %>%
filter(type.effect == "direct")
results.total = results %>%
filter(type.effect == "total")
# Direct effect
pdf(".\\Plots\\ci_plot_final_direct.pdf", width = 10, height = 10*1.414)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dev.off()
# Total effect
pdf(".\\Plots\\ci_plot_final_total.pdf", width = 10, height = 10*1.414)
dwplot(results.total, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated total effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dev.off()
# Read in data and prepare it
data.r = data.prep(lag = 7, shift = 14, response = "median_R_mean", r.infovar = 21, frequency = "weekly")$data
data.r = data.r %>%
arrange(X.Canton_3, X.oneweek) %>%
select(X.Canton_3, X.oneweek, Y, X.population_we)
data.r = rename(data.r, median_R_mean = Y)
data.case = data.prep(lag = 7, shift = 14, response = "casegrowth", r.infovar = 21, frequency = "weekly")$data
data.case = data.case %>%
arrange(X.Canton_3, X.oneweek) %>%
select(X.Canton_3, X.oneweek, Y)
data.case = rename(data.case, casegrowth = Y)
# Merge data and adjust data type and input the abbreviations of the cantons. Also compute correlation
data = merge(data.r, data.case)
dates = rep(seq(as.Date("2020-07-06"), as.Date("2020-12-20"), by = "week"), 26)
data = data %>%
group_by(X.Canton_3) %>%
mutate(correl = sprintf("italic(rho) == %.2f", round(cor(median_R_mean, casegrowth), 2)),
correl.num = round(cor(median_R_mean, casegrowth), 2))
data = cbind(data, dates)
colnames(data) = c("X.Canton_3", "X.oneweek", "median_R_mean", "X.population_we", "casegrowth", "correl", "correl.num", "date")
data.corr = data %>%
group_by(X.Canton_3) %>%
filter(row_number() == 1)
corr.pop = cor(data.corr$correl.num, data.corr$X.population_we)
median.correl = median(data.corr$correl.num)
mean = mean(data.corr$correl.num)
data = data %>%
mutate(X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 2, "GE"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 4, "VD"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 5, "FR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 11, "NE"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 3, "VS"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 9, "BE"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 17, "JU"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 16, "SO"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 22, "BL"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 12, "LU"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 26, "SH"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 24, "BS"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 20, "AG"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 8, "OW"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 10, "NW"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 6, "UR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 1, "TI"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 15, "ZG"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 13, "SZ"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 14, "GL"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 23, "SG"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 18, "ZH"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 21, "AR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 19, "AI"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 7, "GR"),
X.Canton_3 = replace(X.Canton_3, X.Canton_3 == 25, "TG"))
# Plot time series
Sys.setlocale("LC_TIME", "English")
pdf(".\\Plots\\r-case-compare_final.pdf", width = 10, height = 10*1.414)
data %>% ggplot() +
geom_line(aes(x = date, y = median_R_mean, colour = "#1B9E77"), size = 0.75) +
geom_line(aes(x = date, y = casegrowth, colour = "#E7298A"), size = 0.75) +
geom_hline(yintercept=0, color = "gray")+
geom_vline(xintercept=as.Date("2020-08-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-09-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-10-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-11-01"),linetype = "dashed", color = "gray")+
geom_vline(xintercept=as.Date("2020-12-01"),linetype = "dashed", color = "gray")+
facet_wrap(~ X.Canton_3, ncol = 3) +
geom_text(x = as.Date("2020-11-10"), y = 3.6, aes(label = correl), parse = TRUE, data = data, size = 4.5,
check_overlap = TRUE) +
xlab("") +
ylab("") +
ylim(c(-4,6)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_color_manual(name = "", values = c("#1B9E77","#E7298A"),
labels = c("r", "growth.new.cases")) +
theme_bw() +
theme(text = element_text(color = "black", size = 14),
axis.text.y = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 14),
strip.text.y = element_text(color = "black", size = 12),
legend.position = c(0.8275, 0.04))
dev.off()
# Total effect
names = c("RE r total", "RE growth.new.cases total", "FE r total", "FE growth.new.cases total", "DFE r total", "DFE growth.new.cases total")
model.poss = c("random", "within")
response.poss = c("median_R_mean", "casegrowth")
# Allocation of results
results.list.ta = vector("list", 4)
i = 1
# Fixed effects model and random effects model
for (model in model.poss) {
for (response in response.poss) {
results.list.ta[[i]] = estimation(frequency = "weekly", response = response, model = model, infovar = FALSE, type.effect = "total",
lag.one = FALSE)$fit
i = i+1
}
}
# Debiased fixed effects
for (response in response.poss) {
results.list.ta[[i]] = list(multiple_split(response = response, frequency = "weekly", infovar = FALSE, type.effect = "total",
lag.one = FALSE),
frequency = "weekly",
response = response,
model = "debiased",
type.effect = "total")
i = i+1
}
# Create the plots
for (k in 1:length(results.list.ta)) {
if (k <= 4) {
residuals = as.numeric(results.list.ta[[k]][["residuals"]])
predicted = as.numeric(results.list.ta[[k]][["model"]][["Y"]]) - residuals
} else if (k == 5) {
# Reconstruct residuals and fitted values for R.
data = tw.demean(data.prep(lag = 7, shift = 14, response = "median_R_mean", frequency = "weekly", r.infovar = 21)$data,
response = "median_R_mean", frequency = "weekly")
vars = results.list.ta[[3]][["model"]]
X = as.matrix(vars[,-1])
cols.X = colnames(X)
X.demeaned = as.matrix(data[,(colnames(data) %in% cols.X)])
X.demeaned = as.matrix(X.demeaned[,c(1,5,6,7,2,3,4,9,8)]) # Order
y.demeaned = data[,"Y"]
coef = as.vector(results.list.ta[[5]][[1]])
predicted = as.numeric(X.demeaned%*%coef)
residuals = as.numeric(y.demeaned - predicted)
} else if (k == 6) {
# Reconstruct residuals and fitted values for R.
data = tw.demean(data.prep(lag = 7, shift = 14, response = "casegrowth", frequency = "weekly", r.infovar = 21)$data,
response = "casegrowth", frequency = "weekly")
vars = results.list.ta[[4]][["model"]]
X = as.matrix(vars[,-1])
cols.X = colnames(X)
X.demeaned = as.matrix(data[,(colnames(data) %in% cols.X)])
X.demeaned = as.matrix(X.demeaned[,c(1,5,6,7,2,3,4,9,8)]) # Order
y.demeaned = data[,"Y"]
coef = as.vector(results.list.ta[[5]][[1]])
predicted = as.numeric(X.demeaned%*%coef)
residuals = as.numeric(y.demeaned - predicted)
}
# Create dataframe for ggplot
data.plot = data.frame(predicted, residuals)
colnames(data.plot) = c("Predictions", "Residuals")
# Plot fitted vs. residuals
filename = paste("fittedres_total_final", k, ".pdf", sep = "")
pdf(filename, width = 6, height = 6)
print(ggplot(data = data.plot) +
geom_point(aes(x = predicted, y = residuals),
position = position_jitter(h = 0.1, w = 0.1), alpha = 0.5, size = 3,
colour = "gray70") +
geom_hline(yintercept = 0, colour = "grey60", linetype = 2) +
theme_bw() +
xlab("Predicted values") +
ylab("Residuals") +
ggtitle(paste(names[k])) +
theme(text = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
plot.title = element_text(hjust = 0.5)))
dev.off()
}
# Direct effect
names = c("RE r direct", "RE growth.new.cases direct", "FE r direct", "FE growth.new.cases direct", "DFE r direct", "DFE growth.new.cases direct")
model.poss = c("random", "within")
response.poss = c("median_R_mean", "casegrowth")
# Allocation of results
results.list.ta = vector("list", 4)
i = 1
# Fixed effects model and random effects model
for (model in model.poss) {
for (response in response.poss) {
results.list.ta[[i]] = estimation(frequency = "weekly", response = response, model = model, infovar = FALSE, type.effect = "direct",
lag.one = FALSE)$fit
i = i+1
}
}
# Debiased fixed effects
for (response in response.poss) {
results.list.ta[[i]] = list(multiple_split(response = response, frequency = "weekly", infovar = FALSE, type.effect = "direct",
lag.one = FALSE),
frequency = "weekly",
response = response,
model = "debiased",
type.effect = "total")
i = i+1
}
# Create the plots
for (k in 1:length(results.list.ta)) {
if (k <= 4) {
residuals = as.numeric(results.list.ta[[k]][["residuals"]])
predicted = as.numeric(results.list.ta[[k]][["model"]][["Y"]]) - residuals
} else if (k == 5) {
# Reconstruct residuals and fitted values for R.
data = tw.demean(data.prep(lag = 7, shift = 14, response = "median_R_mean", frequency = "weekly", r.infovar = 21)$data,
response = "median_R_mean", frequency = "weekly")
vars = results.list.ta[[3]][["model"]]
X = as.matrix(vars[,-1])
cols.X = colnames(X)
X.demeaned = as.matrix(data[,(colnames(data) %in% cols.X)])
X.demeaned = as.matrix(X.demeaned[,c(1,6,7,8,2,3,4,10,9,5)]) # Order
y.demeaned = data[,"Y"]
coef = as.vector(results.list.ta[[5]][[1]])
predicted = as.numeric(X.demeaned%*%coef)
residuals = as.numeric(y.demeaned - predicted)
} else if (k == 6) {
# Reconstruct residuals and fitted values for R.
data = tw.demean(data.prep(lag = 7, shift = 14, response = "casegrowth", frequency = "weekly", r.infovar = 21)$data,
response = "casegrowth", frequency = "weekly")
vars = results.list.ta[[4]][["model"]]
X = as.matrix(vars[,-1])
cols.X = colnames(X)
X.demeaned = as.matrix(data[,(colnames(data) %in% cols.X)])
X.demeaned = as.matrix(X.demeaned[,c(1,6,7,8,2,3,4,10,9,5)]) # Order
y.demeaned = data[,"Y"]
coef = as.vector(results.list.ta[[6]][[1]])
predicted = as.numeric(X.demeaned%*%coef)
residuals = as.numeric(y.demeaned - predicted)
}
# create dataframe for ggplot
data.plot = data.frame(predicted, residuals)
colnames(data.plot) = c("Predictions", "Residuals")
# Plot fitted vs. residuals
filename = paste("fittedres_direct_final", k, ".pdf", sep = "")
pdf(filename, width = 6, height = 6)
print(ggplot(data = data.plot) +
geom_point(aes(x = predicted, y = residuals),
position = position_jitter(h = 0.1, w = 0.1), alpha = 0.5, size = 3,
colour = "gray70") +
geom_hline(yintercept = 0, colour = "grey60", linetype = 2) +
theme_bw() +
xlab("Predicted values") +
ylab("Residuals") +
ggtitle(paste(names[k])) +
theme(text = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 12),
plot.title = element_text(hjust = 0.5)))
dev.off()
}
# Read in data
covid = read.csv(".\\Data\\covid.csv")
policy = read.csv(".\\Data\\policy.csv", header = TRUE, sep = ",")
# Merge data on common days
data = merge(covid, policy)
data = data %>%
select(geoRegion, facialCover, datum) %>%
mutate(datum = as.Date(datum),
facialCover = facialCover - 2) %>%
filter(datum >= "2020-07-06" & datum <= "2020-12-20")
# Plot
pdf(".\\Plots\\policy_fraction_final.pdf", width = 20, height = 10)
ggplot(data = data, mapping = aes(x = datum, y = facialCover, group = geoRegion)) +
geom_line(size = 1.5) +
geom_line(data = dat.new %>% mutate(datum = as.Date(datum),
facialCover = facialCover - 2) %>% filter(datum >= "2020-07-06" & datum <= "2020-12-20" & geoRegion == "CH"),
mapping = aes(x = datum, y = facialCover), color = "firebrick", size = 2.5) +
geom_segment(aes(x = as.Date(c("2020-08-20")), y = 0.79-1, xend  = as.Date(c("2020-08-20")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 0.75) +
geom_segment(aes(x = as.Date(c("2020-08-23")), y = 0.69-1, xend  = as.Date(c("2020-08-23")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-09-16")), y = 0.89-1, xend  = as.Date(c("2020-09-16")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-11")), y = 0.89-1, xend  = as.Date(c("2020-10-11")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-13")), y = 0.79-1, xend  = as.Date(c("2020-10-13")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-15")), y = 0.69-1, xend  = as.Date(c("2020-10-15")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-16")), y = 0.59-1, xend  = as.Date(c("2020-10-16")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-17"))+0.1, y = 0.49-1, xend  = as.Date(c("2020-10-17"))+0.1, yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
annotate("text", x = as.Date(c("2020-08-20")), y = 0.75-1, label = c("NE"), size = 8) +
annotate("text", x = as.Date(c("2020-08-23")), y = 0.65-1, label = c("BS"), size = 8) +
annotate("text", x = as.Date(c("2020-09-16")), y = 0.85-1, label = c("VD"), size = 8) +
annotate("text", x = as.Date(c("2020-10-11")), y = 0.85-1, label = c("BE"), size = 8) +
annotate("text", x = as.Date(c("2020-10-13")), y = 0.75-1, label = c("GE"), size = 8) +
annotate("text", x = as.Date(c("2020-10-15")), y = 0.65-1, label = c("SZ"), size = 8) +
annotate("text", x = as.Date(c("2020-10-16")), y = 0.55-1, label = c("LU, GR, FR"), size = 8) +
annotate("text", x = as.Date(c("2020-10-17")), y = 0.45-1, label = c("VS"), size = 8) +
scale_x_date(breaks = "1 month", date_labels = "%B") +
scale_y_continuous(breaks= c(-1,0,1)) +
labs(x = "", y = "Facial-Mask Policy", color = "Cantons") +
theme_minimal() +
theme(text = element_text(size = 30),
panel.grid = element_line(linetype = 2, size = 1.25),
panel.grid.minor = element_line(linetype = 2, size = 1.25),
panel.border = element_blank())
dev.off()
ggplot(data = data, mapping = aes(x = datum, y = facialCover, group = geoRegion)) +
geom_line(size = 1.5) +
geom_line(data = policy %>% mutate(datum = as.Date(datum),
facialCover = facialCover - 2) %>% filter(datum >= "2020-07-06" & datum <= "2020-12-20" & geoRegion == "CH"),
mapping = aes(x = datum, y = facialCover), color = "firebrick", size = 2.5) +
geom_segment(aes(x = as.Date(c("2020-08-20")), y = 0.79-1, xend  = as.Date(c("2020-08-20")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 0.75) +
geom_segment(aes(x = as.Date(c("2020-08-23")), y = 0.69-1, xend  = as.Date(c("2020-08-23")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-09-16")), y = 0.89-1, xend  = as.Date(c("2020-09-16")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-11")), y = 0.89-1, xend  = as.Date(c("2020-10-11")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-13")), y = 0.79-1, xend  = as.Date(c("2020-10-13")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-15")), y = 0.69-1, xend  = as.Date(c("2020-10-15")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-16")), y = 0.59-1, xend  = as.Date(c("2020-10-16")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-17"))+0.1, y = 0.49-1, xend  = as.Date(c("2020-10-17"))+0.1, yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
annotate("text", x = as.Date(c("2020-08-20")), y = 0.75-1, label = c("NE"), size = 8) +
annotate("text", x = as.Date(c("2020-08-23")), y = 0.65-1, label = c("BS"), size = 8) +
annotate("text", x = as.Date(c("2020-09-16")), y = 0.85-1, label = c("VD"), size = 8) +
annotate("text", x = as.Date(c("2020-10-11")), y = 0.85-1, label = c("BE"), size = 8) +
annotate("text", x = as.Date(c("2020-10-13")), y = 0.75-1, label = c("GE"), size = 8) +
annotate("text", x = as.Date(c("2020-10-15")), y = 0.65-1, label = c("SZ"), size = 8) +
annotate("text", x = as.Date(c("2020-10-16")), y = 0.55-1, label = c("LU, GR, FR"), size = 8) +
annotate("text", x = as.Date(c("2020-10-17")), y = 0.45-1, label = c("VS"), size = 8) +
scale_x_date(breaks = "1 month", date_labels = "%B") +
scale_y_continuous(breaks= c(-1,0,1)) +
labs(x = "", y = "Facial-Mask Policy", color = "Cantons") +
theme_minimal() +
theme(text = element_text(size = 30),
panel.grid = element_line(linetype = 2, size = 1.25),
panel.grid.minor = element_line(linetype = 2, size = 1.25),
panel.border = element_blank())
dev.off()
# Plot
pdf(".\\Plots\\policy_fraction_final.pdf", width = 20, height = 10)
ggplot(data = data, mapping = aes(x = datum, y = facialCover, group = geoRegion)) +
geom_line(size = 1.5) +
geom_line(data = policy %>% mutate(datum = as.Date(datum),
facialCover = facialCover - 2) %>% filter(datum >= "2020-07-06" & datum <= "2020-12-20" & geoRegion == "CH"),
mapping = aes(x = datum, y = facialCover), color = "firebrick", size = 2.5) +
geom_segment(aes(x = as.Date(c("2020-08-20")), y = 0.79-1, xend  = as.Date(c("2020-08-20")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 0.75) +
geom_segment(aes(x = as.Date(c("2020-08-23")), y = 0.69-1, xend  = as.Date(c("2020-08-23")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-09-16")), y = 0.89-1, xend  = as.Date(c("2020-09-16")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-11")), y = 0.89-1, xend  = as.Date(c("2020-10-11")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-13")), y = 0.79-1, xend  = as.Date(c("2020-10-13")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-15")), y = 0.69-1, xend  = as.Date(c("2020-10-15")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-16")), y = 0.59-1, xend  = as.Date(c("2020-10-16")), yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
geom_segment(aes(x = as.Date(c("2020-10-17"))+0.1, y = 0.49-1, xend  = as.Date(c("2020-10-17"))+0.1, yend = 0.99-1), data = data,
colour = "grey", linetype = 1, size = 1) +
annotate("text", x = as.Date(c("2020-08-20")), y = 0.75-1, label = c("NE"), size = 8) +
annotate("text", x = as.Date(c("2020-08-23")), y = 0.65-1, label = c("BS"), size = 8) +
annotate("text", x = as.Date(c("2020-09-16")), y = 0.85-1, label = c("VD"), size = 8) +
annotate("text", x = as.Date(c("2020-10-11")), y = 0.85-1, label = c("BE"), size = 8) +
annotate("text", x = as.Date(c("2020-10-13")), y = 0.75-1, label = c("GE"), size = 8) +
annotate("text", x = as.Date(c("2020-10-15")), y = 0.65-1, label = c("SZ"), size = 8) +
annotate("text", x = as.Date(c("2020-10-16")), y = 0.55-1, label = c("LU, GR, FR"), size = 8) +
annotate("text", x = as.Date(c("2020-10-17")), y = 0.45-1, label = c("VS"), size = 8) +
scale_x_date(breaks = "1 month", date_labels = "%B") +
scale_y_continuous(breaks= c(-1,0,1)) +
labs(x = "", y = "Facial-Mask Policy", color = "Cantons") +
theme_minimal() +
theme(text = element_text(size = 30),
panel.grid = element_line(linetype = 2, size = 1.25),
panel.grid.minor = element_line(linetype = 2, size = 1.25),
panel.border = element_blank())
dev.off()
