}
}
}
# Finally, we estimate cantonal-clustered multiplier bootstrapped standard errors for the fixed effects
# models.
results.list.bootstrap = vector("list", 4)
i = 1
# Run the bootstrap with B = 1000
# Run the models
for (frequency in freq.poss) {
for (response in response.poss) {
for (type.effect in type.effect.poss) {
results.list.bootstrap[[i]] = list(bs.estimation(frequency = frequency, response = response, infovar = FALSE, type.effect = type.effect),
frequency = frequency,
response = response,
type.effect = type.effect)
i = i+1
}
}
}
################################################################################
# (IV) STORE THE RESULTS (POINT ESTIMATES, STD. ERRORS, P-VALUES)
# Extract the results from the 5 lists that are differently structured. We do this in the order
# that they are run in the above code. Run the code in order (see variable j)
# Empty matrix with the corresponding dimensions
results.dat = matrix(NA, nrow = 102, ncol = 7)
colnames(results.dat) = c("estimate", "std.error", "p.val", "model", "term", "type.effect", "add.infovar")
# Model abbreviations from response and model type
abbrev = function(response, model) {
if (response == "median_R_mean" && model == "within") {
return("FE R")
} else if (response == "median_R_mean" && model == "random") {
return("RE R")
} else if (response == "casegrowth" && model == "within") {
return("FE Casegrowth")
} else if (response == "casegrowth" && model == "random") {
return("RE Casegrowth")
} else if (response == "median_R_mean" && model == "debiased") {
return("DFE R")
} else if (response == "casegrowth" && model == "debiased") {
return("DFE Casegrowth")
}
}
# Names of standard error estimators in correct ordering
cov.names = c("HC3", "Canton", "Time", "Canton-Time", "NW", "CH", "Own")
# Go through standard fixed effects and random effect estimation
j = 1
for (p in 1:8) {
for (k in 1:7) {
results.dat[j,1] = results.list.fe[[p]][["results"]][["results"]][[k]]["W", 1]
results.dat[j,2] = results.list.fe[[p]][["results"]][["results"]][[k]]["W", 2]
results.dat[j,3] = results.list.fe[[p]][["results"]][["results"]][[k]]["W", 4]
results.dat[j,4] = cov.names[k]
results.dat[j,5] = abbrev(response = results.list.fe[[p]][["response"]],
model    = results.list.fe[[p]][["model"]])
results.dat[j,6] = results.list.fe[[p]][["type.effect"]]
results.dat[j,7] = "FALSE"
j = j + 1
}
}
# Go through random effects models of case-growth with the additional information variables
# as in Chernozhukov (2020)
for (q in 1:2) {
results.dat[j,1] = results.list.fe.infovar[[q]][[1]][["results"]][[1]]["W", 1]
results.dat[j,2] = results.list.fe.infovar[[q]][[1]][["results"]][[1]]["W", 2]
results.dat[j,3] = results.list.fe.infovar[[q]][[1]][["results"]][[1]]["W", 4]
results.dat[j,4] = "HC3"
results.dat[j,5] = abbrev(response = results.list.fe.infovar[[q]][["response"]],
model    = results.list.fe.infovar[[q]][["model"]])
results.dat[j,6] = results.list.fe.infovar[[q]][["type.effect"]]
results.dat[j,7] = "TRUE"
j = j + 1
}
# Extract the results for the de-biased models. Match the specifications from the de-biased models
# to those of the non de-biased models.
for (d in 1:4) {
for (i in 1:7) {
results.dat[j,1] = results.list.dfe[[d]][[1]][["W"]]
results.dat[j,4] = cov.names[i]
results.dat[j,5] = abbrev(response = results.list.dfe[[d]][["response"]],
model    = results.list.dfe[[d]][["model"]])
results.dat[j,6] = results.list.dfe[[d]][["type.effect"]]
results.dat[j,7] = "FALSE"
j = j + 1
}
}
results.dat[(59:(59+6)),2] = results.dat[1:7,2]       # Std. errors from non de-biased model for FE R direct
results.dat[(66:(66+6)),2] = results.dat[8:(8+6),2]   # Std. errors from non de-biased model for FE R total
results.dat[(73:(73+6)),2] = results.dat[29:(29+6),2] # Std. errors from non de-biased model for FE Case-growth direct
results.dat[(80:(80+6)),2] = results.dat[36:(36+6),2] # Std. errors from non de-biased model for FE Case-growth direct
# Compute the p-values for the de-biased models via the t-distribution. Depending on the specification, we have a different
# number of degrees of freedom, i.e:
#      - FE Weekly direct: 589
#      - FE Weekly total: 590
#      - RE Weekly direct: 630
#      - RE Weekly total: 634
for (e in 59:86) {
# How many degrees of freedom
if (grepl("FE", results.dat[e,"term"]) == TRUE && results.dat[e,"type.effect"] == "direct") {
df = 589
} else if (grepl("FE", results.dat[e,"term"]) == TRUE && results.dat[e,"type.effect"] == "total") {
df = 590
} else if (grepl("RE", results.dat[e,"term"]) == TRUE && results.dat[e,"type.effect"] == "direct") {
df = 630
} else if (grepl("RE", results.dat[e,"term"]) == TRUE && results.dat[e,"type.effect"] == "total") {
df = 634
}
# Compute p value
results.dat[e,3] = 2*pt(-abs(as.numeric(results.dat[[e,1]])/as.numeric(results.dat[[e,2]])), df = df)
}
# Get the results from the double machine learning
for (l in 1:8) {
results.dat[j,1] = results.list.dml[[l]][[1]][1]
results.dat[j,2] = results.list.dml[[l]][[1]][2]
results.dat[j,3] = results.list.dml[[l]][[1]][4]
results.dat[j,4] = "DML"
if (results.list.dml[[l]][["response"]] == "median_R_mean") {
results.dat[j,5] = "DML R"
} else {
results.dat[j,5] = "DML Casegrowth"
}
results.dat[j,6] = results.list.dml[[l]][["type.effect"]]
results.dat[j,7] = results.list.dml[[l]][["infovar"]]
j = j + 1
}
# Get the results from the bootstrap
for (n in 1:4) {
results.dat[j,1] = results.list.bootstrap[[n]][[1]][1,"W"]
results.dat[j,2] = results.list.bootstrap[[n]][[1]][2,"W"]
if (results.list.bootstrap[[n]][["type.effect"]] == "direct") {
df = 589
} else {
df = 590
}
results.dat[j,3] = 2*pt(-abs(results.list.bootstrap[[n]][[1]][1,"W"]/results.list.bootstrap[[n]][[1]][2,"W"]), df = df)
results.dat[j,4] = "Canton-Bootstrap"
results.dat[j,5] = abbrev(response = results.list.bootstrap[[n]][["response"]], model = "within")
results.dat[j,6] = results.list.bootstrap[[n]][["type.effect"]]
results.dat[j,7] = "FALSE"
j = j + 1
}
# Bootstrapped standard errors for de-biased models. Make an array containing a
# triple in (row) x (row) x (degree of freedom) x (term) x (type.effect)-space to loop over.
v1 = c(59, 95, 589, "DFE R", "direct") # DFE R direct
v2 = c(66, 96, 590, "DFE R", "total")  # DFE R total
v3 = c(73, 97, 589, "DFE Casegrowth", "direct") # DFE case growth direct
v4 = c(80, 98, 590, "DFE Casegrowth", "total") # DFE case growth total
arr = array(c(v1, v2, v3, v4), dim = c(5,4))
for (g in 1:4) {
results.dat[j,1] = as.numeric(results.dat[as.numeric(arr[1,g]),1])
results.dat[j,2] = as.numeric(results.dat[as.numeric(arr[2,g]),2])
results.dat[j,3] = 2*pt(-abs(as.numeric(results.dat[j,1])/as.numeric(results.dat[j,2])), df = as.numeric(arr[3,g]))
results.dat[j,4] = "Canton-Bootstrap"
results.dat[j,5] = arr[4,g]
results.dat[j,6] = arr[5,g]
results.dat[j,7] = FALSE
j = j + 1
}
# Save as data frame and export it as csv file
results.dat = as.data.frame(results.dat)
# Remove rows with non-HC3 estimators for the random effects model as they are not actually estimated.
results.dat = results.dat %>%
filter(!(model != "HC3" & term == "RE R")) %>%
filter(!(model != "HC3" & term == "RE Casegrowth"))
# Write csv
write.csv(results.dat,"./Data/results_long_period_new.csv", row.names = FALSE)
# Empty environment
rm(list = ls())
# Read in data; change col-names to correspond to dw-plot; make ordering consistent; remove those with additional
# information variables as well as the DML rows.
results = read.csv(".\\Data\\results_long_period_new.csv", header = T, sep = ",", stringsAsFactors = FALSE)
results = results %>%
filter(!model == "DML") %>%
filter(!model == "Canton-Bootstrap") %>%
filter(add.infovar == FALSE)
results[results == "FE R"] = "FE r"
results[results == "DFE R"] = "DFE r"
results[results == "RE R"] = "RE r"
results[results == "FE Casegrowth"] = "FE growth.new.cases"
results[results == "DFE Casegrowth"] = "DFE growth.new.cases"
results[results == "RE Casegrowth"] = "RE growth.new.cases"
results[results == "Canton-Time"] = "Canton-Week"
results[results == "Time"] = "Week"
results.direct = results %>%
filter(type.effect == "direct")
results.total = results %>%
filter(type.effect == "total")
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank())+
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank(),
axis.text.y = element_text(color = "black", size = 14, angle = 45))+
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank(),
axis.text.y = element_text(color = "black", size = 14, angle = 45,
vjust = 0.5))+
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank(),
axis.text.y = element_text(color = "black", size = 14, angle = 45,
vjust = -1))+
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank(),
axis.text.y = element_text(color = "black", size = 14, angle = 45,
vjust = -2))+
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank(),
legend.position = "top")+
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
scale_color_manual(values = paletteer::paletteer_d("LaCroixColoR::Orange")) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank())+
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
# scale_color_brewer(palette = "Dark2",
#                    name = "Standard Errors",
#                    guide = guide_legend(override.aes = list(linetype = 1,
#                                                             shape = NA))) +
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
# scale_color_brewer(palette = "Dark2",
#                    name = "Standard Errors",
#                    guide = guide_legend(override.aes = list(linetype = 1,
#                                                             shape = NA))) +
scale_color_manual(values = paletteer::paletteer_d("LaCroixColoR::Orange")) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
# scale_color_brewer(palette = "Dark2",
#                    name = "Standard Errors",
#                    guide = guide_legend(override.aes = list(linetype = 1,
#                                                             shape = NA))) +
scale_color_manual(values = paletteer::paletteer_d("rcartocolor::Geyser")) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
# scale_color_brewer(palette = "Dark2",
#                    name = "Standard Errors",
#                    guide = guide_legend(override.aes = list(linetype = 1,
#                                                             shape = NA))) +
scale_color_manual(values = paletteer::paletteer_d("rcartocolor::Geyser"),
name = "Standard Errors") +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
# scale_color_brewer(palette = "Dark2",
#                    name = "Standard Errors",
#                    guide = guide_legend(override.aes = list(linetype = 1,
#                                                             shape = NA))) +
scale_color_manual(values = paletteer::paletteer_d("rcartocolor::Earth"),
name = "Standard Errors") +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
# scale_color_brewer(palette = "Dark2",
#                    name = "Standard Errors",
#                    guide = guide_legend(override.aes = list(linetype = 1,
#                                                             shape = NA))) +
scale_color_manual(values = paletteer::paletteer_d("rcartocolor::Temps"),
name = "Standard Errors") +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.direct, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated direct effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
dwplot(results.total, conf.level = 0.95, dodge_size = 0.6,
vars_order = c("FE r", "FE growth.new.cases",
"DFE r", "DFE growth.new.cases",
"RE r", "RE growth.new.cases"),
whisker_args = list(size = 1.5),
dot_args = list(size = 3.5, shape = 20)) +
theme_bw(base_line_size = 1.5) +
scale_color_brewer(palette = "Dark2",
name = "Standard Errors",
guide = guide_legend(override.aes = list(linetype = 1,
shape = NA))) +
theme(text = element_text(color = "black", size = 14),
axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
legend.text = element_text(color = "black", size = 14),
panel.grid.major.y = element_blank()) +
xlab("Estimated total effect of mask policy and corresponding 95%-CI") +
scale_x_continuous(breaks = c(0.1,0.0,-0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7), limits = c(-0.7, 0.08),
minor_breaks = c(0.05,-0.05,-0.15,-0.25,-0.35,-0.45,-0.55,-0.65)) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2)
